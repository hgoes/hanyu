package main

import (
	"fmt"
	"io"
	"os"
	"sort"

	"github.com/hgoes/hanyu/cedict"
	"github.com/hgoes/hanyu/unihan"
)

func main() {
	replacements := make(map[rune]rune)

	rd, err := os.Open("../cedict_1_0_ts_utf-8_mdbg.txt.gz")
	if err != nil {
		panic(err)
	}
	p, err := cedict.New(rd)
	if err != nil {
		panic(err)
	}

	for {
		ln, err := p.Next()
		if err != nil {
			panic(err)
		}
		if ln == nil {
			break
		}
		switch sub := ln.(type) {
		case cedict.Entry:
			if sub.Simplified == sub.Traditional {
				break
			}
			trad := []rune(sub.Traditional)
			simp := []rune(sub.Simplified)
			for i := range trad {
				if trad[i] == simp[i] {
					continue
				}
				_, exists := replacements[trad[i]]
				if exists {
					if len(trad) != 1 {
						// prefer the one-character entry
						continue
					}
				}
				replacements[trad[i]] = simp[i]
			}
		}
	}

	charDB, err := unihan.Open("../Unihan.zip")
	if err != nil {
		panic(err)
	}

	entries := charDB.Get(unihan.SimplifiedVariant)
	for {
		r, entr, err := entries.Next()
		if err != nil {
			if err == io.EOF {
				break
			}
			panic(err)
		}
		if _, exists := replacements[r]; exists {
			// prefer CEDICT entries
			continue
		}
		repl := *entr.(*unihan.SimplifiedVariantF)
		replacements[r] = repl[0]
	}
	entries.Close()
	charDB.Close()

	type entry struct {
		From rune
		To   rune
	}

	replEntries := make([]entry, 0, len(replacements))
	for from, to := range replacements {
		replEntries = append(replEntries, entry{
			From: from,
			To:   to,
		})
	}
	sort.Slice(replEntries, func(i, j int) bool {
		return replEntries[i].From < replEntries[j].From
	})

	h, err := os.Create("gen.go")
	if err != nil {
		panic(err)
	}
	fmt.Fprintf(h,
		"// Code generated by gen-simp-trad; DO NOT EDIT.\n\n"+
			"package simplified\n\n"+
			"// Replacements maps traditional characters to their simplified replacement\n"+
			"var Replacements = map[rune]rune{\n")
	for _, entry := range replEntries {
		fmt.Fprintf(h, "\t%q: %q,\n", entry.From, entry.To)
	}
	fmt.Fprintf(h, "}\n")
	if err := h.Close(); err != nil {
		panic(err)
	}
}
